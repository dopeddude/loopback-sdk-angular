'use strict';
<%
 var concatenateParams = function(sample) {
	var result = '';
	 sample.forEach((arg, argIndex) => {
		result += (argIndex !== 0 ? ', ' : '') + '"' + arg.arg + '": "{' + (arg.required === true ? '!' : '') + arg.arg + '}"'
	});
	 return result;
 };
  %>
var rcTemplateCollections = [<% for (var modelName in models) {
	//var modelName = 'ratedata';
	var meta = models[modelName];
	// capitalize the model name
	modelName = modelName[0].toUpperCase() + modelName.slice(1);
	meta.methods.forEach(function(action, methodIndex) {
	var methodName = action.name.split('.').join('$');
	%> <%= methodIndex !== 0 ? ', ' : '' %>{
		"template": {
			"method": <%-: action.getHttpMethod() | q %>
			, "url":  <%-: (urlBase + action.getFullPath()) | q %>
			, "headers": {
				"accepts": "application/json",
				"content-type": "application/json"
			}<% if (action.accepts instanceof Array && action.accepts.length !== 0) {
			var bodyParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'body';
					}),
			formParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'form';
			}),
			queryParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'query';
			}),
			pathParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'path';
			}),
			reqParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'req';
			}),
			resParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'res';
			}),
			contextParams = action.accepts.filter((arg) => {
						return arg.http && arg.http.source === 'context';
			});

			if(bodyParams.length > 0) { %>
			, "body": {
				<%- concatenateParams(bodyParams) %>
			} <% }
			if(formParams.length > 0) { %>
			, "form": {
				<%- concatenateParams(formParams) %>
			} <% }
			if(queryParams.length > 0) { %>
			, "query": {
				<%- concatenateParams(queryParams) %>
			} <% }
			if(pathParams.length > 0) { %>
			, "path": {
				<%- concatenateParams(pathParams) %>
			} <% }
			if(reqParams.length > 0) { %>
			, "req": {
				<%- concatenateParams(reqParams) %>
			} <% }
			if(resParams.length > 0) { %>
			, "res": {
				<%- concatenateParams(resParams) %>
			} <% }
			if(contextParams.length > 0) { %>
			, "context": {
				<%- concatenateParams(contextParams) %>
			} <% }
		} %>
		},
		"function": {
			<%-: action.name | q %>: [<%- action.accepts.map((arg) => {return '"' + arg.arg + '"'}).join(',') %>]
		}
	}
<% }); // meta.methods.foreach -  %><%= ',' %>
<% } // for modelName in models -   %>];

module.exports = function(baseURL) {
	rcTemplateCollections.forEach((rc) => {
		rc.template.url = baseURL + rc.template.url;
	});
	return rcTemplateCollections;
};